#examples:
map("BEL",2)
map("NLD",1)
map("SWE",1)
#Name: Wij doen MEE - Dillen Bruil & Rik van Heumen
#Date: 9 January 2017
rm(list=ls())
#Load packages
library(raster)
#Define function
map <- function(country, level){
#get Data
adm <- raster::getData("GADM", country = country,
level = level)
# get appropriate administrative names
plot(adm, axes = TRUE)
if(level==0){names=adm$NAME_0}
if(level==1){names=adm$NAME_1}
if(level==2){names=adm$NAME_2}
if(level==3){names=adm$NAME_3}
if(level==4){names=adm$NAME_4}
if(level==5){names=adm$NAME_5}
if(level==6){names=adm$NAME_6}
#############
#Layout plot
#############
#box and grid
box()
grid()
#axis names
mtext(side = 1, "Longitude", line = 2.5, cex=1.1)
mtext(side = 2, "Latitude", line = 2.5, cex=1.1)
#title
x=raster::getData("ISO3")
name=x[which(x[1]==country),2]
mtext(side = 3, line = 1, paste("Map of",name, "at level", level), cex = 2)
#add names to plot
invisible(text(getSpPPolygonsLabptSlots(adm),
labels = as.character(names), cex = 0.6, col = "blue", font = 2))
}
#An example based on that function
#map(x,y)
#x = ISO3 country code between quotes
#y = administrative level
#examples:
map("BEL",2)
map("NLD",1)
map("SWE",1)
##TEAM BS - Bart Middelburg & Stijn Beernink
##10-01-2017
##Script lesson 2
rm(list=ls())
#install packages
install.packages("spatstat")
install.packages("rgeos")
install.packages("countrycode")
#install library
library(raster)
library(spatstat)
library(rgeos)
library(countrycode)
##Simple function where you can select your own country of choice and how much points need to be sampled.
##Use this function by DEM_Country("Your country", amount of points)
##See examples below
#Create Function
DEM_Country = function(country, pointsnumber)
{
##to attain full country names
cc <- countrycode(country, "country.name", "iso3c", warn = FALSE)
## the downloading of the country DEM data
CTRY <- raster::getData('alt', country= cc, mask=TRUE) ## SRTM 90m height data
CTRYshp <- raster::getData('GADM', country= cc, level=2) ## administrative boundaries
## Create random points
dran <- runifpoint(pointsnumber, win = as.vector(extent(CTRY)))
## Make the random point spatial points
S <- SpatialPoints(data.frame(x = dran$x, y = dran$y),
proj4string = CRS(proj4string(CTRYshp)))
## Select only the ones within belgium
Sint <- gIntersection(S, CTRYshp)
## Create a map
plot(CTRY, main = paste("DEM (m) of", country), sub= paste("Number of points:",pointsnumber))
plot(CTRYshp, add=TRUE)
plot(Sint, add = TRUE, col = "red", pch = 19, cex = 0.2)
out <- extract(CTRY, Sint, df = TRUE)
colnames(out) <- c("id", "height")
head(out)
plot(out, type = "p", pch = 19)
}
##EXAMPLES##
#Netherlands
DEM_Country("Netherlands", 1200)
#Belgium
DEM_Country("Belgium", 280)
#Zimbabwe
DEM_Country("Zimbabwe", 400)
rm(list=ls())
welcome = function(){
print(goodmorning)
}
welcome()
welcome = function(){
print("goodmorning")
}
welcome()
goodbye = function(){
print("see you later")
}
goodbye()
###lesson 3 test###
rm(list=ls())
welcome = function(){
print("goodmorning")
}
welcome()
goodbye = function(){
print("see you later")
}
goodbye()
rm(list= ls())
setwd("M:/MSc1/geo_scripting/lesson3")
install.packages("raster")
library(raster)
source('R/ageCalculator.R')
library(raster)
source('R/ageCalculator.R')
library(raster)
r<- s<- raster(ncol=50, nrow=50)
r
s
r[] <- 1:ncell(r)
s[] <- 2 * (1:ncell(s))
s[200:400] <- 150
s
s[50:150] <- 151
plot(r)
rm(list = ls())
data(cars)
class(cars)
head(cars)
plot(cars)
rm(list = ls())
data(muese)
data(meuse)
class(meuse)
View(meuse)
coordinates(meuse) <- c("x", "y")
class(meuse)
?coordinates
bubble(meuse, "zinc", maxsize = 2.5,
main = "zinc concentration (ppm)",
key.entries = 2^(-1:4))
data("meuse.riv")
meuse.sr <- SpatialPolygons(list(Polygons(list(Polygon(meuse.riv)),
"meuse.riv")))
View(meuse.riv)
data(meuse.grid)
View(meuse.grid)
coordinates(meuse.grid) = c("x", "y")
?gridded
gridded(meuse.grid) = TRUE
spplot(meuse.grid, col.regions = bpy.colors(), main = "meuse.grid",
sp.layout = list(
list("sp.polygons", meuse.sr),
list("sp.points", meuse, pch = "+",
col = "black")
))
meuse.sr <- SpatialPolygons(list(Polygons(list(Polygon(meuse.riv)),
"meuse.riv")))
data(meuse.grid)
coordinates(meuse.grid) = c("x", "y")
gridded(meuse.grid) = TRUE
spplot(meuse.grid, col.regions = bpy.colors(), main = "meuse.grid",
sp.layout = list(
list("sp.polygons", meuse.sr),
list("sp.points", meuse, pch = "+",
col = "black")
))
class(meuse.sr)
class(meuse.grid)
?as.numeric
?format
library(raster)
a <- raster(nrow=50, ncol=50)
a[] <- floor(rnorm(n=ncell(a)))
?floor
freq(a, value=-2)
b <- a
c <- NA
list <- c(a,b,c)
list
for(i in 1:length(list)) {
out[i] <- freq(list[[i]], value=-2)
}
fun <- function(x, value) {
tr <- try(freq(x=x, value=value), silent=TRUE)
if (class(tr) == 'try-error') {
return('This object returned an error')
} else {
return(tr)
}
}
out <- list()
for(i in 1:length(list)) {
out[i] <- fun(list[[i]], value=-2)
}
out
foo <- function(x) {
x <- x + 2
print(x)
bar(2)
}
bar <- function(x) {
x <- x + a.variable.which.does.not.exist
print(x)
}
foo(2)
traceback()
foo(2)
leap <- function(year){
if(!(year %% 4 == 0)){
FALSE
}
}
leap(2002)
leap(2004)
leap <- function(year){
if(!(year %% 4 == 0)){
FALSE
} else if(!(year %% 100 == 0)){
TRUE
}
}
leap(2002)
leap(2004)
leap <- function(year){
if(!(year %% 4 == 0)){
FALSE
} else if(!(year %% 100 == 0)){
TRUE
} else if(!(year %% 400 == 0)){
FALSE
} else
TRUE
}
leap(2002)
leap(2004)
leap(1800)
leap(2000)
2000%4
2000%%4
2000%%100
1800/400
1800/4
leap <- function(year){
if((year %% 4 != 0)){
FALSE
} else if(!(year %% 100 == 0)){
TRUE
} else if(!(year %% 400 == 0)){
FALSE
} else
TRUE
}
leap(2002)
leap(2004)
leap(1800)
leap(2000)
source('R/leap.R')
leap(2000)
is.leap(2000)
is.leap <- function(year){
if(year >= 1582){
leap(year)
} else
print(paste(year, "is out of the valid range"))
}
is.leap(1581)
is.leap(2004)
check_numeric <- function(year){
if(is.numeric(year)){
TRUE
}
}
check_numeric <- function(year){
if(is.numeric(year)){
TRUE
} else
print("Error: argument of class numeric expected")
}
is.leap <- function(year){
if(check_numeric){
if(year >= 1582){
leap(year)
} else
print(paste(year, "is out of the valid range"))
}
}
is.leap('john')
is.leap(2004)
leap <- function(year){
if((year %% 4 != 0)){
FALSE
} else if((year %% 100 != 0)){
TRUE
} else if((year %% 400 != 0)){
FALSE
} else
TRUE
}
check_numeric <- function(year){
if(is.numeric(year)){
TRUE
} else
print("Error: argument of class numeric expected")
}
is.leap <- function(year){
if(check_numeric == TRUE){
if(year >= 1582){
leap(year)
} else
print(paste(year, "is out of the valid range"))
}
}
is.leap(1581)
is.leap(2004)
is.numeric(2004)
check_numeric <- function(year){
if(is.numeric(year)){
} else
print("Error: argument of class numeric expected")
}
is.leap <- function(year){
if(check_numeric){
if(year >= 1582){
leap(year)
} else
print(paste(year, "is out of the valid range"))
}
}
is.leap(2004)
check_numeric <- function(year){
if(is.numeric(year)){
year <- year
} else
print("Error: argument of class numeric expected")
}
is.leap <- function(year){
if(check_numeric){
if(year >= 1582){
leap(year)
} else
print(paste(year, "is out of the valid range"))
}
}
is.leap(2004)
check_numeric <- function(year){
if(is.numeric(year)){
year <- year
} else
warning("Error: argument of class numeric expected")
}
check_numeric("john")
check_numeric <- function(year){
if(is.numeric(year)){
year <- year
} else
warning("argument of class numeric expected")
}
check_numeric("john")
check_numeric(2000)
check_numeric <- function(year){
if(is.numeric(year)){
} else
warning("argument of class numeric expected")
}
check_numeric(2000)
check_numeric <- function(year){
if(is.numeric(year)){
TRUE
} else
warning("argument of class numeric expected")
}
check_numeric(2000)
check_numeric <- function(year){
if(is.numeric(year)){
TRUE
} else
warning("argument of class numeric expected")
}
is.leap <- function(year){
if(check_numeric == TRUE){
if(year >= 1582){
leap(year)
} else
print(paste(year, "is out of the valid range"))
}
}
is.leap(2000)
traceback()
is.leap <- function(year){
if(check_numeric == TRUE){
if(year >= 1582){
leap(year)
} else
print(paste(year, "is out of the valid range"))
}
}
leap <- function(year){
if((year %% 4 != 0)){
FALSE
} else if((year %% 100 != 0)){
TRUE
} else if((year %% 400 != 0)){
FALSE
} else
TRUE
}
check_numeric <- function(year){
if(is.numeric(year)){
TRUE
} else
warning("argument of class numeric expected")
}
is.leap <- function(year){
if(check_numeric == TRUE){
if(year >= 1582){
leap(year)
} else
print(paste(year, "is out of the valid range"))
}
}
is.leap(2004)
traceback()
traceback()
is.leap <- function(year){
if (is.numeric(year)){
if(year >= 1582){
leap(year)
} else
print(paste(year, "is out of the valid range"))
} else
warning("argument of class numeric expected")
}
is.leap(2004)
is.leap('john')
#Function to calculate whether a year
#is a leap year or not
leap <- function(year){
if((year %% 4 != 0)){
FALSE
} else if((year %% 100 != 0)){
TRUE
} else if((year %% 400 != 0)){
FALSE
} else
TRUE
}
is.leap <- function(year){
if (is.numeric(year)){
if(year >= 1582){
leap(year)
} else
print(paste(year, "is out of the valid range"))
} else
warning("argument of class numeric expected")
}
source('R/is.leap.R')
source('R/is.leap.R')
is.leap(2000)
is.leap(1560)
is.leap('john')
is.leap <- function(year){
if (is.numeric(year)){
if(year >= 1582){
leap(year)
} else
print(paste(year, "is out of the valid range"))
} else
stop("argument of class numeric expected")
}
is.leap("john")
leap <- function(year){
# Function to check leap year or not
# year is the year you want to check (numeric)
if((year %% 4 != 0)){
FALSE
} else if((year %% 100 != 0)){
TRUE
} else if((year %% 400 != 0)){
FALSE
} else
TRUE
}
is.leap <- function(year){
# Function defining and handling constraints
if (is.numeric(year)){
# Checks whether input is numeric
if(year >= 1582){
# Check if the year falls within Gregorian calender
leap(year)
} else
print(paste(year, "is out of the valid range"))
} else
warning("argument of class numeric expected")
}
is.leap(2000)
is.leap(1581)
is.leap("j")
shell.exec(https://www.youtube.com/watch?v=hSwg4fIgthU)
shell.exec(https:\\www.youtube.com/watch?v=hSwg4fIgthU)
shell.exec(www.youtube.com/watch?v=hSwg4fIgthU)
shell.exec("https://www.youtube.com/watch?v=hSwg4fIgthU")
